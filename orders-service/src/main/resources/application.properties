spring.application.name=orders-service

#server.port=8082
# Para que se establezca un puerto aleatorio
server.port=0

spring.datasource.url=jdbc:mysql://localhost:3306/ms_orders
spring.datasource.username=irs
spring.datasource.password=Test123
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.hibernate.ddl-auto=update

# Eureka client
eureka.instance.hostname=localhost
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}
eureka.client.service-url.defaultZone=http://eureka:password@localhost:8761/eureka

# Keycloak
#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8181/realms/shop-app-realm-dev
#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8181/realms/shop-app-realm

#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8181/realms/springboot-microservicios-shop-app-realm/protocol/openid-connect/certs
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8181/realms/shop-app-realm/protocol/openid-connect/certs
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8181/realms/shop-app-realm-dev/protocol/openid-connect/certs

# Actuator
management.endpoints.web.exposure.include=health,prometheus
management.endpoints.web.base-path=/actuator/orders
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true

# Resilience4j - Circuit Breaker
# Indicamos que el indicador de salud del circuit breaker se registrará automaticamente al sistema de monitoreo de salud de spring (actuator)
resilience4j.circuitbreaker.instances.orders-service.register-health-indicator=true
# Si el número de fallas consecutivas alcanza el umbral definido el circuit breaker se abrirá y bloqueará las solicitudes futuras al servicio externo
resilience4j.circuitbreaker.instances.orders-service.sliding-window-size=5
# Tipo de ventana deslizante que se utilizará para realizar el seguimiento de las llamadas y los fallos en el circuit breaker (count_based recuento de eventos, time_based intervalo de tiempo)
resilience4j.circuitbreaker.instances.orders-service.sliding-window-type=count_based
# Establecer el umbral de tasa de fallos requerido para abrir el circuit breaker
#resilience4j.circuitbreaker.instances.orders-service.minimum-number-of-calls=5
# Porcentaje máximo de llamadas fallidas permitidas dentro de la ventana deslizante antes de que el circuit breaker se abra
resilience4j.circuitbreaker.instances.orders-service.failure-rate-threshold=50
# Se define la duración de espera en el estado abierto antes de intentar una nueva llamada al servicio externo
resilience4j.circuitbreaker.instances.orders-service.wait-duration-in-open-state=10s
# Habilitamos la transición automática desde el estado abierto al estado medio abierto
resilience4j.circuitbreaker.instances.orders-service.automatic-transition-from-open-to-half-open-enabled=true
# Establecer el número máximo de llamadas permitidas en el estado medio abierto
resilience4j.circuitbreaker.instances.orders-service.permitted-number-of-calls-in-half-open-state=3

# Kafka
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.retries=1
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# Tracing
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
management.tracing.sampling.probability=1.0

logging.level.root=debug
logging.pattern.level= %5p [${spring.application.name}, %X{traceId:-}, %X{spanId:-}]